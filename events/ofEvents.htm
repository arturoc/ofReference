<h2 id="ofdraginfo">ofDragInfo</h2>
<p>Passed to the <a href="../app/ofBaseApp.htm">ofBaseApp</a> in the <a href="../app/ofBaseApp.htm#dragEvent">dragEvent</a> method.</p>
<h3 id="vector_string_files">vector <string> files</h3>
<p>All the files included in the drag events</p>
<h3 id="ofpoint_position">ofPoint position</h3>
<p>The location in the app where the drag event terminated, i.e. where you dropped the file/s.</p>
<h2 id="ofkeyeventargs">ofKeyEventArgs</h2>
<p>Sent during <a href="../app/ofBaseApp.htm#keyPressed">keyPressed</a> and <a href="../app/ofBaseApp.htm#keyReleased">keyReleased</a> events.</p>
<h2 id="ofmouseeventargs">ofMouseEventArgs</h2>
<p>Sent to [ofBaseApp}(../app/ofBaseApp.htm) during <a href="../app/ofBaseApp.htm#mousePressed">mousePressed</a> <a href="../app/ofBaseApp.htm#mouseReleased">mouseReleased</a> and <a href="../app/ofBaseApp.htm#mouseDrag">mouseDrag</a> notifications.</p>
<h2 id="oftoucheventargs">ofTouchEventArgs</h2>
<p>These are sent to any any registered listeners when the device detects touches. Most commonly this is the ofBaseApp in the <a href="../app/ofBaseApp.htm#touchDown">touchDown</a>, <a href="../app/ofBaseApp.htm#touchUp">touchUp</a>, <a href="../app/ofBaseApp.htm#touchUp">touchUp</a>, <a href="../app/ofBaseApp.htm#touchDoubleTap">touchDoubleTap</a>, <a href="../app/ofBaseApp.htm#touchCancelled">touchCancelled</a> method.</p>
<h3 id="int_id">int id</h3>
<p>The id of the touch.</p>
<h3 id="int_time">int time</h3>
<p>For taps or presses this is the time in seconds. Not currently used.</p>
<h3 id="float_x">float x</h3>
<p>Application coordinate location of the event</p>
<h3 id="float_y">float y</h3>
<p>Application coordinate location of the event</p>
<h3 id="int_numtouches">int numTouches</h3>
<p>How many touch points the event involves. Not currently used.</p>
<h3 id="float_width">float width</h3>
<p>The width of the touch area. Not currently used.</p>
<h3 id="float_height">float height</h3>
<p>The height of the touch area.  Not currently used.</p>
<h3 id="float_angle">float angle</h3>
<p>If there are two touches this is the angle between them.  Not currently used.</p>
<h3 id="float_minoraxis">float minoraxis</h3>
<p>The shorter axis of a touch area.  Not currently used.</p>
<h3 id="float_majoraxis">float majoraxis</h3>
<p>The longer axis of a touch area.  Not currently used.</p>
<h3 id="float_pressure">float pressure</h3>
<p>If your device is recording pressure, this represents the pressure of the touch.  Not currently used.</p>
<h3 id="float_xspeed">float xspeed</h3>
<p>For touch drag events, this is the approximation of the speed of the movement along the x-axis.  Not currently used.</p>
<h3 id="float_yspeed">float yspeed</h3>
<p>For touch drag events, this is the approximation of the speed of the movement along the y-axis.  Not currently used.</p>
<h3 id="float_xaccel">float xaccel</h3>
<p>For touch drag events, this is the approximation of the acceleration of the movement along the x-axis.  Not currently used.</p>
<h3 id="float_yaccel">float yaccel</h3>
<p>For touch drag events, this is the approximation of the acceleration of the movement along the y-axis.  Not currently used.</p>
<h2 id="ofaudioeventargs">ofAudioEventArgs</h2>
<h3 id="float_buffer">float* buffer</h3>
<h3 id="int_buffersize">int bufferSize</h3>
<h3 id="int_nchannels">int nChannels</h3>
<h2 id="ofresizeeventargs">ofResizeEventArgs</h2>
<p>### int width  ###
 ### int height ###</p>
<h2 id="ofevents">ofEvents</h2>
<p>Below are the public methods of ofEvents</p>
<h3 id="void_ofregistermouseeventslistenerclass__listener">void ofRegisterMouseEvents(ListenerClass * listener)</h3>
<p>Register the mouse events to the listener. This assumes that the listener has mousePressed, mouseReleased, mouseMoved, and mouseDragged methods to handle the events being dispatched to it.</p>
<h3 id="void_ofregisterkeyeventslistenerclass__listener">void ofRegisterKeyEvents(ListenerClass * listener)</h3>
<p>Register the mouse events to the listener. This assumes that the listener has keyPressed, keyReleased methods to handle the events being dispatched to it.</p>
<h3 id="void_ofregistertoucheventslistenerclass__listener">void ofRegisterTouchEvents(ListenerClass * listener)</h3>
<p>Register the mouse events to the listener. This assumes that the listener has touchDown, touchMoved, touchUp, touchDoubleTap, touchCancelled methods to handle the events being dispatched to it.</p>
<h3 id="void_ofregistergetmessageslistenerclass__listener">void ofRegisterGetMessages(ListenerClass * listener)</h3>
<p>Register the mouse events to the listener. This assumes that the listener has a gotMessage method to handle the events being dispatched to it.</p>
<h3 id="void_ofregisterdrageventslistenerclass__listener">void ofRegisterDragEvents(ListenerClass * listener)</h3>
<p>Register the drag events to the listener. This assumes that the listener has the dragEvent method to handle the events being dispatched to it.</p>
<h3 id="void_ofunregistermouseeventslistenerclass__listener">void ofUnregisterMouseEvents(ListenerClass * listener)</h3>
<p>Stop the listener from listening to mouse events.</p>
<h3 id="void_ofunregisterkeyeventslistenerclass__listener">void ofUnregisterKeyEvents(ListenerClass * listener)</h3>
<p>Stop the listener from listening to key events.</p>
<h3 id="void_ofunregistertoucheventslistenerclass__listener">void ofUnregisterTouchEvents(ListenerClass * listener)</h3>
<p>Stop the listener from listening to touch events.</p>
<h3 id="void_ofunregistergetmessageslistenerclass__listener">void ofUnregisterGetMessages(ListenerClass * listener)</h3>
<p>Stop the listener from listening to message events.</p>
<h3 id="void_ofunregisterdrageventslistenerclass__listener">void ofUnregisterDragEvents(ListenerClass * listener)</h3>
<p>Stop the listener from listening to drag events.</p>